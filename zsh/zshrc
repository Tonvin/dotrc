# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
export LC_CTYPE=en_US.UTF-8

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes

#ZSH_THEME="pmcgee"
#ZSH_THEME="steeef"
ZSH_THEME="melon"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM="/root/doctrc/zsh/custom"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    bundler
    rake
    screen
)


source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#
#
function gitb(){
    branch=`git symbolic-ref --short HEAD`
    echo "current branch:${branch}"
    if [ -n "$(git status --porcelain)" ]; then
        echo "there are modified files";
        echo "git add";
        git add .
        echo "git commit";
        git commit -m "fix"
        echo "git pull origin ${branch}";
        git pull origin ${branch}
        if [ -z "$(git status --porcelain)" ]; then
            git push origin ${branch}
        else
            echo "there are some errors after pulling from origin";
        fi
    else
        git pull origin ${branch}
    fi
}

function p() {
    argv=("$@")
    if [ $# -eq 0 ]
    then
        echo "No arguments supplied"
    fi
    cmd="grep -iRl '$1' ."

    for ((i=2; i<=$#; i++))
        do
            cmd=$cmd" --include \"*.${argv[i]}\" "
        done
    if [ -e ~/.grep-exclude ]
    then
        while read exclude
        do
            cmd=$cmd" --exclude="$exclude
        done < ~/.grep-exclude
    fi

    if [ -e ~/.grep-exclude-dir ]
    then
        while read excludedir
        do
            cmd=$cmd" --exclude-dir="$excludedir
        done < ~/.grep-exclude-dir
    fi
    echo $cmd
    eval $cmd
}

function f(){
    file=$1
    if [ $# -eq 0 ]
          then
              echo "No arguments supplied"
    fi
    if [ -z "${file##*.vue}" ] ;then
        find . -not -name "*.json" -not -name "*.js" \
        -not -path "./.git/*" \
        -not -path "./.logs/*" \
        -iname "*$1"
    elif [ -z "${file##*.php}" ] ;then
        find . -not -name "*.png" -not -name "*.jpg" -not -name "*.gif" \
        -not -name "*.json" -not -name "*.js" -not -name "*.vue" \
        -not -path "./.git/*" \
        -not -path ".logs/*" \
        -not -path "./vendor/*" \
        -not -path "./wwwroot/manager/web/*" \
        -not -path "./standapi/*" \
        -not -path "./bi/*" \
        -iname "*$1"
    elif [ -z "${file##*.js}" ] ;then
        find . -not -name "*.png" -not -name "*.jpg" -not -name "*.gif" \
        -not -name "*.php" -not -name "*.json" -not -name "*.vue" \
        -not -path "./.git/*" \
        -not -path ".logs/*" \
        -not -path "./standapi/*" \
        -not -path "./bi/*" \
        -iname "*$1"
    else
        find . -not -name "*.png" -not -name "*.jpg" -not -name "*.gif" \
        -not -name "*.json" -not -name "*.js" -not -name "*.vue" -not -name "*.map"  \
        -not -path "./.git/*" \
        -not -path "./logs/*" \
        -not -path "./.logs/*" \
        -not -path "./wwwroot/manager/web/*" \
        -not -path "./standapi/*" \
        -not -path "./bi/*" \
        -iname "*$1*"
    fi
    return
    ext=$2
    if [ $ext="" ]
          then
              ext="php"
    fi
    if [ $2="php" ] ;then
        find . -not -name "*.png" -not -name "*.jpg" -not -name "*.gif" \
        -not -name "*.json" -not -name "*.js" -not -name "*.vue" \
        -not -path ".git/*" \
        -not -path ".logs/*" \
        -not -path "./wwwroot/manager/web/*" \
        -not -path "./standapi/*" \
        -not -path "./bi/*" \
        -iname "*$1*"
    elif [ $2="js" ] ;then
        find .  -not -name "*.php" -not -name "*.bak" ! -path "./.git/*" ! -path "./logs/*" -iname "*$1*"
    elif [ $2="vue" ] ;then
        find .  -not -name "*.php" -not -name "*.js" ! -path "./.git/*" ! -path "./logs/*" -iname "*$1."
    elif [ $2="be" ] ;then
        find .  -not -name "*.json" -not -name "*.js" -not -name "*.vue" ! -path "./.git/*" ! -path "./logs/*" ! -path "./wwwroot/manager/web/*" -iname "*$1*"
    else [ $2="fe" ] 
        find .  -not -name "*.php" -not -name "*.bak" ! -path "./.git/*" ! -path "./logs/*" -iname "*$1*"
    fi
}

function fv(){
    if [ $# -eq 0 ]
          then
              echo "No arguments supplied"
    fi
    string=$1
    substr="."
    if [ -z "${string##*$substr*}" ] ;then
        vim -p $(find .  -not -name "*.json" -not -name "*.js" -not -name "*.vue" ! -path "./logs/*" ! -path "./wwwroot/manager/web/*" -iname "*$1")
    else
        vim -p $(find .  -not -name "*.json" -not -name "*.js" -not -name "*.vue" ! -path "./logs/*" ! -path "./wwwroot/manager/web/*" -iname "*$1*")
    fi
}

function grso(){
    remote=`git remote show`
    echo "git remote show $remote"
    git remote show $remote
}


function glob(){
    remote=`git remote show`
    branch=` git branch --show-current`
    echo "git pull $remote $branch"
    git pull $remote $branch
}

function ghob(){
    remote=`git remote show`
    branch=` git branch --show-current`
    echo "git push $remote $branch"
    git push $remote $branch
}

function gfr(){
    branch=$1
    if [ $branch="" ] 
        then
          return "No arguments supplied"
    fi
    remote=`git remote show`
    git fetch $remote $branch
}

function gs(){
	git st
}

#check modified php file syntax
function gcps(){
    git ls-files --modified | xargs -L1 php -l
}

source ~/dotrc/zsh/color
source ~/.alias

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
